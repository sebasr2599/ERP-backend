// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  first_name         String
  last_name          String
  password           String
  rol                String
  Inventory          Inventory[]
  HistoricPrice      HistoricPrice[]
  HistoricEquivalent HistoricEquivalent[]
  Order              Order[]
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Product Product[]
}

model Unit {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  Product            Product[]
  EquivalentUnit     EquivalentUnit[]
  HistoricEquivalent HistoricEquivalent[]
  OrderDetail        OrderDetail[]
}

model Client {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Order Order[]
}

model Product {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  description        String
  priceUnit          Float
  // priceWholesale     Float
  category           Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  unit               Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  image              String
  unitId             Int
  Inventory          Inventory[]
  HistoricPrice      HistoricPrice[]
  equivalentUnits    EquivalentUnit[]
  HistoricEquivalent HistoricEquivalent[]
  OrderDetail        OrderDetail[]
  categoryId         Int
}

model Inventory {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Float
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  // location  String
  productId Int
  userId    Int
}

model HistoricPrice {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  priceUnit Float
  // priceWholesale Float
  date      DateTime
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  userId    Int
}

model EquivalentUnit {
  id         Int     @id @default(autoincrement())
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  unit       Unit    @relation(fields: [unitId], references: [id])
  equivalent Float
  productId  Int
  unitId     Int
}

model HistoricEquivalent {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  unit       Unit     @relation(fields: [unitId], references: [id])
  equivalent Float
  date       DateTime
  user       User     @relation(fields: [userId], references: [id])
  productId  Int
  unitId     Int
  userId     Int
}

model Order {
  id           Int           @id @default(autoincrement())
  date         DateTime
  user         User          @relation(fields: [userId], references: [id])
  // location     String
  // name         String
  // wholesale    Boolean
  status       String
  total        Float
  userId       Int
  clientId     Int?
  orderDetails OrderDetail[]
  Client       Client?       @relation(fields: [clientId], references: [id])
}

model OrderDetail {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Float
  price     Float
  unit      Unit    @relation(fields: [unitId], references: [id])
  orderId   Int
  productId Int
  unitId    Int
}
